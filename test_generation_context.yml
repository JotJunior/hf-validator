project_settings:
  test_framework: "PHPUnit"
  php_version: ">=8.1"
  base_namespace: "{composer_autoload_psr4}\\Test"
  source_dir: "src/"
  test_dir: "tests/"
naming_conventions:
  test_class_suffix: "Test"
  test_method_prefix: "test"
  data_provider_prefix: "provide"
  test_file_pattern: "{Classname}Test.php"
method_structure:
  format: |
    #[Test]
    #[Group('unit')]
    public function {testName}(): void
    {
        // Arrange
        // Act
        // Assert
    }
docblock_rules:
  required_sections:
    - "What is being tested"
    - "Conditions/Scenarios"
    - "Expected results"
  docblock_template: |
    /**
      * What is being tested:
      * - {what_is_tested_topics}
      * Conditions/Scenarios:
      * - {conditions_scenarios_topics}
      * Expected results:
      * - {expected_results_topics}
      */
mocking_rules:
  framework: "PHPUnit"
  preferred_method: "createMock"
  naming_pattern: "$mock{Classname}"
  mock_methods:
    - pattern: "get*"
      return_style: "single_value"
    - pattern: "find*"
      return_style: "nullable"
    - pattern: "list*"
      return_style: "collection"
  stub_conventions:
    data_providers: true
    fake_data_generation: "Faker\\Factory"
    datetime_format: "Y-m-d\TH:i:s.u"
assertion_rules:
  exception_testing:
    required: true
    pattern: |
      $this->expectException({ExceptionClass}::class);
      $this->expectExceptionMessage('{message}');
  collection_testing:
    count_assertion: true
    type_assertion: true
    content_assertion: true
test_groups:
  - unit
  - integration
  - feature
  - slow
  - critical
minimum_coverage: 80
validation_rules:
  forbidden_practices:
    - "sleep()"
    - "die()"
    - "exit()"
  required_assertions: true
  max_method_length: 50
  max_test_complexity: 5
templates:
  basic_test: |
    <?php
    
    declare(strict_types=1);
    
    namespace {namespace};
    
    use PHPUnit\Framework\TestCase;
    use PHPUnit\Framework\Attributes\CoversClass;
    use PHPUnit\Framework\Attributes\Group;
    use PHPUnit\Framework\Attributes\Test;
    use PHPUnit\Framework\TestCase;
    use {tested_class_namespace}\{tested_class};
    
    #[CoversClass({tested_class})]
    class {test_class_name} extends TestCase
    {
        private {tested_class} $sut;
    
        protected function setUp(): void
        {
            parent::setUp();
            $this->sut = new {tested_class}();
            // Any other required dependencies
        }
    
    }
  data_provider: |
    /**
     * {scenario_description}
     * @return array<string, array<mixed>>
     */
    public function provide{scenarioName}(): array
    {
        return [
            'scenario_description' => [
                'input' => value,
                'expected' => value,
            ],
        ];
    }